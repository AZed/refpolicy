
policy_module(authlogin,1.0)

########################################
#
# Declarations
#

type remote_login_t;
domain_obj_id_change_exempt(remote_login_t)
domain_subj_id_change_exempt(remote_login_t)
domain_role_change_exempt(remote_login_t)
domain_type(remote_login_t)
domain_wide_inherit_fd(remote_login_t)
auth_login_entry_type(remote_login_t)
role system_r types remote_login_t;

type remote_login_tmp_t;
files_tmp_file(remote_login_tmp_t)

########################################
#
# Remote login remote policy
#

allow remote_login_t self:capability { dac_override chown fowner fsetid kill setgid setuid net_bind_service sys_nice sys_resource sys_tty_config };
allow remote_login_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
allow remote_login_t self:process { setrlimit setexec };
allow remote_login_t self:fd use;
allow remote_login_t self:fifo_file rw_file_perms;
allow remote_login_t self:unix_dgram_socket create_socket_perms;
allow remote_login_t self:unix_stream_socket create_stream_socket_perms;
allow remote_login_t self:unix_dgram_socket sendto;
allow remote_login_t self:unix_stream_socket connectto;
allow remote_login_t self:shm create_shm_perms;
allow remote_login_t self:sem create_sem_perms;
allow remote_login_t self:msgq create_msgq_perms;
allow remote_login_t self:msg { send receive };

allow remote_login_t remote_login_tmp_t:dir create_dir_perms;
allow remote_login_t remote_login_tmp_t:file create_file_perms;
files_create_tmp_files(remote_login_t, remote_login_tmp_t, { file dir })

kernel_read_system_state(remote_login_t)
kernel_read_kernel_sysctl(remote_login_t)

dev_getattr_mouse(remote_login_t)
dev_setattr_mouse(remote_login_t)
dev_dontaudit_search_sysfs(remote_login_t)
# for SSP/ProPolice
dev_read_urand(remote_login_t)

fs_getattr_xattr_fs(remote_login_t)
fs_search_auto_mountpoints(remote_login_t)

selinux_get_fs_mount(remote_login_t)
selinux_validate_context(remote_login_t)
selinux_compute_access_vector(remote_login_t)
selinux_compute_create_context(remote_login_t)
selinux_compute_relabel_context(remote_login_t)
selinux_compute_user_contexts(remote_login_t)

term_relabel_all_user_ptys(remote_login_t)

auth_domtrans_chk_passwd(remote_login_t)
auth_dontaudit_read_shadow(remote_login_t)
auth_rw_login_records(remote_login_t)
auth_rw_lastlog(remote_login_t)
auth_rw_faillog(remote_login_t)
auth_exec_pam(remote_login_t)
auth_manage_pam_console_data(remote_login_t)

corecmd_list_bin(remote_login_t)
corecmd_list_sbin(remote_login_t)
corecmd_read_bin_symlink(remote_login_t)
corecmd_read_sbin_symlink(remote_login_t)
# cjp: these are probably not needed:
corecmd_read_bin_file(remote_login_t)
corecmd_read_bin_pipe(remote_login_t)
corecmd_read_bin_socket(remote_login_t)
corecmd_read_sbin_file(remote_login_t)
corecmd_read_sbin_pipe(remote_login_t)
corecmd_read_sbin_socket(remote_login_t)

domain_read_all_entry_files(remote_login_t)

files_read_etc_files(remote_login_t)
files_read_etc_runtime_files(remote_login_t)
files_list_home(remote_login_t)
files_read_usr_files(remote_login_t)
files_list_world_readable(remote_login_t)
files_read_world_readable_files(remote_login_t)
files_read_world_readable_symlinks(remote_login_t)
files_read_world_readable_pipes(remote_login_t)
files_read_world_readable_sockets(remote_login_t)
files_list_mnt(remote_login_t)
# for when /var/mail is a sym-link
files_read_var_symlink(remote_login_t)

init_rw_script_pid(remote_login_t)

libs_use_ld_so(remote_login_t)
libs_use_shared_libs(remote_login_t)

logging_send_syslog_msg(remote_login_t)

seutil_read_config(remote_login_t)
seutil_read_default_contexts(remote_login_t)

miscfiles_read_localization(remote_login_t)

userdom_use_unpriv_users_fd(remote_login_t)
userdom_search_all_users_home(remote_login_t)
# Only permit unprivileged user domains to be entered via rlogin,
# since very weak authentication is used.
userdom_signal_unpriv_users(remote_login_t)
userdom_spec_domtrans_unpriv_users(remote_login_t)

# Search for mail spool file.
mta_getattr_spool(remote_login_t)

ifdef(`targeted_policy',`
	unconfined_domain_template(remote_login_t)
	unconfined_shell_domtrans(remote_login_t)
')

tunable_policy(`read_default_t',`
	files_list_default(remote_login_t)
	files_read_default_files(remote_login_t)
	files_read_default_symlinks(remote_login_t)
	files_read_default_sockets(remote_login_t)
	files_read_default_pipes(remote_login_t)
')

# Allow remote login to resolve host names (passed in via the -h switch)
tunable_policy(`use_dns',`
	allow remote_login_t self:udp_socket create_socket_perms;
	corenet_udp_sendrecv_all_if(remote_login_t)
	corenet_raw_sendrecv_all_if(remote_login_t)
	corenet_udp_sendrecv_all_nodes(remote_login_t)
	corenet_raw_sendrecv_all_nodes(remote_login_t)
	corenet_udp_sendrecv_dns_port(remote_login_t)
	corenet_udp_bind_all_nodes(remote_login_t)
	sysnet_read_config(remote_login_t)
')

tunable_policy(`use_nfs_home_dirs',`
	fs_read_nfs_files(remote_login_t)
	fs_read_nfs_symlinks(remote_login_t)
')

tunable_policy(`use_samba_home_dirs',`
	fs_read_cifs_files(remote_login_t)
	fs_read_cifs_symlinks(remote_login_t)
')

optional_policy(`nis.te',`
	nis_use_ypbind(remote_login_t)
')

optional_policy(`nscd.te',`
	nscd_use_socket(remote_login_t)
')

optional_policy(`usermanage.te',`
	usermanage_read_crack_db(remote_login_t)
')

ifdef(`TODO',`
# this goes to xdm:
optional_policy(`remotelogin.te',`
	# FIXME: what is this for?
	remotelogin_signull(xdm_t)
')

allow remote_login_t userpty_type:chr_file { setattr write };
allow remote_login_t ptyfile:chr_file { getattr ioctl };

optional_policy(`rlogind.te', `
	allow remote_login_t rlogind_devpts_t:chr_file { setattr rw_file_perms };
	allow remote_login_t rlogind_devpts_t:chr_file { relabelfrom relabelto };
')

optional_policy(`telnetd.te', `
	allow remote_login_t telnetd_devpts_t:chr_file { setattr rw_file_perms };
	allow remote_login_t telnetd_devpts_t:chr_file { relabelfrom relabelto };
')
') dnl endif TODO
